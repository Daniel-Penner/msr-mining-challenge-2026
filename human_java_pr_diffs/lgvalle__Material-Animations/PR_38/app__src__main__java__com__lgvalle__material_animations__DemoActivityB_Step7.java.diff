@@ -0,0 +1,147 @@
+package com.lgvalle.material_animations;
+
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.Toolbar;
+import android.transition.Fade;
+import android.transition.Transition;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.util.Arrays;
+import java.util.List;
+
+import butterknife.Bind;
+import butterknife.ButterKnife;
+
+/**
+ *
+ *
+ * TRANSITION LISTENER - PARA SALIR
+ *
+ *
+ */
+public class DemoActivityB_Step7 extends AppCompatActivity {
+    @Bind(R.id.demo_fab)
+    View fab;
+    @Bind(R.id.view_root)
+    ViewGroup viewRoot;
+    @Bind(R.id.sample_list)
+    RecyclerView sampleList;
+    @Bind(R.id.dummy_layer)
+    ViewGroup dummyLayer;
+    private List<Sample> samples;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_b_step6);
+        ButterKnife.bind(this);
+        setupWindowAnimations();
+        setupSamples();
+        setupToolbar();
+        setupLayout();
+    }
+
+    private void setupWindowAnimations() {
+        // Re-enter transition is executed when returning to this activity
+        Transition transition = new Fade();
+        transition.setDuration(1000);
+        excludeCommons(transition);
+        getWindow().setEnterTransition(transition);
+        getWindow().getSharedElementReturnTransition().setDuration(1000);
+
+        final Transition f = getWindow().getSharedElementEnterTransition();
+        f.addListener(new Transition.TransitionListener() {
+            @Override
+            public void onTransitionStart(Transition transition) {
+
+            }
+
+            @Override
+            public void onTransitionEnd(Transition transition) {
+                //TransitionManager.beginDelayedTransition(viewRoot);
+                //fab.setScaleX(1);
+                //fab.setScaleY(1);
+
+                fab.setVisibility(View.VISIBLE);
+                /*
+                fab.animate()
+                        .scaleX(1)
+                        .scaleY(1)
+                        .setDuration(500);
+                */
+                f.removeListener(this);
+            }
+
+            @Override
+            public void onTransitionCancel(Transition transition) {
+
+            }
+
+            @Override
+            public void onTransitionPause(Transition transition) {
+
+            }
+
+            @Override
+            public void onTransitionResume(Transition transition) {
+
+            }
+        });
+    }
+
+    private void excludeCommons(Transition transition) {
+        transition.excludeTarget(R.id.toolbar, true);
+        transition.excludeTarget(android.R.id.statusBarBackground, true);
+        transition.excludeTarget(android.R.id.navigationBarBackground, true);
+    }
+
+    private void setupSamples() {
+        samples = Arrays.asList(
+                new Sample(ContextCompat.getColor(this, R.color.sample_red), "Transitions"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_blue), "Shared Elements"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_green), "View animations"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_yellow), "Circular Reveal Animation"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_red), "Transitions"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_blue), "Shared Elements"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_green), "View animations"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_yellow), "Circular Reveal Animation"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_red), "Transitions"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_blue), "Shared Elements"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_green), "View animations"),
+                new Sample(ContextCompat.getColor(this, R.color.sample_yellow), "Circular Reveal Animation")
+        );
+    }
+
+    protected void setupToolbar() {
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+        getSupportActionBar().setDisplayShowTitleEnabled(false);
+    }
+
+    private void setupLayout() {
+        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.sample_list);
+        recyclerView.setHasFixedSize(true);
+        recyclerView.setLayoutManager(getLayoutManager());
+        DemoRecyclerAdapter samplesRecyclerAdapter = new DemoRecyclerAdapter(this, samples);
+        recyclerView.setAdapter(samplesRecyclerAdapter);
+    }
+
+    @NonNull
+    private RecyclerView.LayoutManager getLayoutManager() {
+        return new GridLayoutManager(this, 3);
+        //return new LinearLayoutManager(this);
+    }
+
+
+    @Override
+    public void onBackPressed() {
+        fab.setVisibility(View.GONE);
+        finishAfterTransition();
+    }
+}